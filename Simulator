import java.io.*;
import java.lang.*;
import java.util.StringTokenizer;

public class Simulator{

	static String[] tokensOfNetlist = new String[100];
	static int numberOfGates;
	static String gate;
	static String[] storeLine = new String[100];
	static int numberOfLines;
	static String gateType;
	
	public static void main(String args[])throws Exception
	{ 
		FileReader readFile = new FileReader("./netlist.txt"); //reads netlist file
		LineNumberReader lineReader = new LineNumberReader(readFile); //reads it line by line
	    	
	    	FileReader readInputFile = new FileReader("./input.txt"); //reads input file
		LineNumberReader inputFileLineReader = new LineNumberReader(readInputFile); //reads it line by line
		
	    	printFanout(lineReader); //prints total number of gates and fanout of each gate
	    	
	    	computeGateValues(inputFileLineReader); //computes value of each gate wrt to the inputs in the input file
	    	
	    	readFile.close(); 
		readInputFile.close();
		lineReader.close();
		inputFileLineReader.close();
		
	}
	
	/**Prints statistics of file --
	1. Total number of gates in the netlist file
	2. Fanout of each gate */
	
	public static void printFanout(LineNumberReader netlist)throws Exception
	{	   
		String string;
		int j=0;
		
		while((string=netlist.readLine())!=null)
	    	{
	    		numberOfGates = netlist.getLineNumber();
	    		storeLine[numberOfLines++] = string;
			StringTokenizer str = new StringTokenizer(string);
	       		while (str.hasMoreTokens())
	        	{
				tokensOfNetlist[j++] = str.nextToken();
			
			}
		}
		
		System.out.println("Total number of gates = " + numberOfGates); 
		
		int[] count = new int[numberOfGates];
		   
		for (int k=0;k<numberOfGates;k++)
		{
			String str2 = Integer.toString(k);         
		        for (int p=0;p<j;p++)
		        {
		       		if(tokensOfNetlist[p].equals(str2))
		               	{
		                	count[k]++;
		               	}
		        }
		} 
			
		for(int q=0;q<numberOfGates;q++)
		{
			int result = count[q] - 1; //deduct one to remove index where the gate number is mentioned on a line
			System.out.println(q + " " + result);
		}
	}
	
	/** Method prints the output values of the gates from the netlist by taking inputs from the input list. */
	
	public static void computeGateValues(LineNumberReader inputFile)throws Exception
	{
		String string;
		boolean[] tokensOfInputFile = new boolean[100]; //store boolean values of inputs
		int count;
		int finalIntResult=0;
		String[] inputAtGate = new String[100]; //storing inputs
		
		boolean[] finalResult = new boolean[numberOfGates]; //stores boolean values of the values of gates after computation with inputs
		
		//reads tokenized input file into array
		while((string=inputFile.readLine())!=null)
		{
			count = 0;
			StringTokenizer str = new StringTokenizer(string);
	       	while (str.hasMoreTokens())
	        {
				if(str.nextToken().equals("1")) tokensOfInputFile[count++] = true; //assigns value of TRUE to element in the input  which is = 1 for easier boolean computation
				
				else tokensOfInputFile[count++] = false; //assigns value of TRUE to element in the input  which is = 1 for easier boolean computation
			}
			
			for(int i = 0; i<numberOfLines; i++)
			{
				int x = 0;
				int indexOfToken =  0;
	    			StringTokenizer stringOfTokens = new StringTokenizer(storeLine[i]); //tokenization of a line
	       			while (stringOfTokens.hasMoreTokens())
	        		{
	                		if (indexOfToken==1) gateType = stringOfTokens.nextToken().toLowerCase(); //stores gate type at 1st index
					
	                		else if(indexOfToken>1) inputAtGate[x++] = stringOfTokens.nextToken(); //stores inputs at 2nd and 3rd index
	                
					else stringOfTokens.nextToken();  
	                
					indexOfToken++;                      
	            		}
	            		int size = indexOfToken-2; //taking into account only inputs of the line
				boolean[] values = new boolean[size];
				
				for(int k=0;k<size;k++)
				{
					if(inputAtGate[k].startsWith("I")) 
					{
	                			 int temp = Integer.parseInt(inputAtGate[k].substring(1));    
	                			 values[k]= tokensOfInputFile[temp]; 
					}
					
					else
					{
						int temp = Integer.parseInt(inputAtGate[k]);
						values[k] = finalResult[temp]; //this case is for computing value for when the input is the output of another gate
					}
				}
				
				int n = 0;
				
				if(gateType.equals("not")) finalResult[i] = !(values[n]); //computation of input's not value
				
				else if(gateType.equals("and")) finalResult[i] = (values[n++] && values[n]); //computation of and of two given inputs
				
				else if(gateType.equals("or")) finalResult[i] = (values[n++] || values[n]); //computation of or of two given inputs
				
				if(finalResult[i]==true) finalIntResult = 1;
				else if(finalResult[i]==false) finalIntResult = 0;
				
				System.out.print(finalIntResult + " "); //printing final output after computation
			}
			System.out.println();
		}
	}
}
